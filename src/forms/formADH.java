/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forms;

import DAO.Chitietdonhang;
import DAO.ChitietdonhangDAO;
import DAO.Donhang;
import DAO.DonhangDAO;
import DAO.MySQL;
import DAO.NhacungcapDAO;
import DAO.Sanpham;
import DAO.SanphamDAO;
import Tools.Dialog;
import Tools.PrintPDF;
import Tools.Tienich;
import java.awt.Font;
import java.io.File;
import java.sql.ResultSet;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Locale;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Chu Ai Duc
 */
public class formADH extends javax.swing.JInternalFrame {

    /**
     * Creates new form formADH
     */
    SanphamDAO daoSP = new SanphamDAO();
    DonhangDAO daoDH = new DonhangDAO();
    DefaultTableModel modelSP;
    DefaultTableModel modelCart;
    ChitietdonhangDAO daoCT = new ChitietdonhangDAO();
    NhacungcapDAO daoNCC = new NhacungcapDAO();
    int madh = -1;
    ArrayList<Chitietdonhang> Old = new ArrayList<>();
    Locale localeVN = new Locale("vi", "VN");
    NumberFormat currencyVN = NumberFormat.getCurrencyInstance(localeVN);

    public formADH() {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI bi = (BasicInternalFrameUI) this.getUI();
        bi.setNorthPane(null);
        tblSP.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 13));
        tblSP.getTableHeader().setOpaque(false);
        tblSP.getTableHeader().setBackground(new java.awt.Color(32, 136, 203));
        tblSP.getTableHeader().setForeground(new java.awt.Color(255, 255, 255));
        CartTemp.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 13));
        CartTemp.getTableHeader().setOpaque(false);
        CartTemp.getTableHeader().setBackground(new java.awt.Color(32, 136, 203));
        CartTemp.getTableHeader().setForeground(new java.awt.Color(255, 255, 255));
        txtTenKH.setText(Tienich.khachhang.getHoten());
        daoNCC.reLoad();
        daoSP.reLoad();
        daoDH.reLoad();
        daoCT.reLoad();
        checkbox.setSelected(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtsearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSP = new javax.swing.JTable();
        btnAddCart = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        CartTemp = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        checkbox = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        soluong = new javax.swing.JTextField();
        btnApply = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtTenKH = new javax.swing.JLabel();
        btnApply1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        tongtien = new javax.swing.JLabel();
        cbotrangthai = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(txtsearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 50, 210, 30));

        btnSearch.setBackground(new java.awt.Color(204, 204, 255));
        btnSearch.setText("Tìm");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        jPanel1.add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 50, 70, 30));

        jLabel6.setForeground(new java.awt.Color(153, 0, 0));
        jLabel6.setText("Danh mục sản phẩm");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 70, -1, -1));

        tblSP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Mã sản phẩm", "Tên sản phẩm", "Nhà cung cấp", "Đơn giá", "Số lượng còn", "Chọn"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSP.setFocusable(false);
        tblSP.setIntercellSpacing(new java.awt.Dimension(0, 0));
        tblSP.setRowHeight(30);
        tblSP.setSelectionBackground(new java.awt.Color(232, 57, 95));
        tblSP.setShowVerticalLines(false);
        jScrollPane2.setViewportView(tblSP);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 90, 630, 150));

        btnAddCart.setBackground(new java.awt.Color(204, 204, 255));
        btnAddCart.setText("Thêm vào đơn");
        btnAddCart.setBorder(null);
        btnAddCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCartActionPerformed(evt);
            }
        });
        jPanel1.add(btnAddCart, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 250, 130, 30));

        CartTemp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã", "Tên sản phẩm", "Nhà cung cấp", "Đơn giá", "Số lượng", "Thành tiền", "Chọn xóa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        CartTemp.setFocusable(false);
        CartTemp.setIntercellSpacing(new java.awt.Dimension(0, 0));
        CartTemp.setRowHeight(30);
        CartTemp.setSelectionBackground(new java.awt.Color(232, 57, 95));
        CartTemp.setShowVerticalLines(false);
        CartTemp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CartTempMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(CartTemp);
        if (CartTemp.getColumnModel().getColumnCount() > 0) {
            CartTemp.getColumnModel().getColumn(0).setPreferredWidth(25);
            CartTemp.getColumnModel().getColumn(2).setPreferredWidth(50);
            CartTemp.getColumnModel().getColumn(3).setPreferredWidth(60);
            CartTemp.getColumnModel().getColumn(4).setPreferredWidth(10);
            CartTemp.getColumnModel().getColumn(5).setPreferredWidth(90);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 310, 760, 140));

        jLabel5.setForeground(new java.awt.Color(153, 0, 0));
        jLabel5.setText("Đơn hàng");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, -1, -1));

        checkbox.setText("Đã thanh toán");
        jPanel1.add(checkbox, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 470, -1, -1));

        jLabel3.setText("Số lượng");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 510, -1, -1));

        soluong.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(soluong, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 500, 50, 30));

        btnApply.setBackground(new java.awt.Color(204, 204, 255));
        btnApply.setText("Áp dụng");
        btnApply.setBorder(null);
        btnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyActionPerformed(evt);
            }
        });
        jPanel1.add(btnApply, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 500, 90, 30));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel1.setText("KHÁCH HÀNG");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        txtTenKH.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        txtTenKH.setForeground(new java.awt.Color(204, 0, 0));
        txtTenKH.setText("jLabel2");
        jPanel1.add(txtTenKH, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, -1, -1));

        btnApply1.setBackground(new java.awt.Color(204, 204, 255));
        btnApply1.setText("Sửa SL");
        btnApply1.setBorder(null);
        btnApply1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApply1ActionPerformed(evt);
            }
        });
        jPanel1.add(btnApply1, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 500, 90, 30));

        jLabel2.setText("Tổng tiền:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 460, -1, -1));

        tongtien.setForeground(new java.awt.Color(232, 57, 95));
        tongtien.setText("0");
        jPanel1.add(tongtien, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 460, 140, -1));

        cbotrangthai.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mua hàng", "In lại", "Đổi trả" }));
        cbotrangthai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbotrangthaiActionPerformed(evt);
            }
        });
        jPanel1.add(cbotrangthai, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 470, 120, -1));

        jButton1.setText("In hóa đơn");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 510, 170, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 860, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    boolean checkstatus(int ma) {
        try {
            String sql = "select * from qlbill where madh=?";
            ResultSet rs = MySQL.chaySelect(sql, ma);
            if (rs.next()) {
                return false;
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        return true;
    }

    //Đổ bảng sản phẩm, x là mã đơn hàng truyền vào
    public void loadSP(int ma) {
        daoSP.reLoad();
        //Xét mã đơn hàng đưa vô hàm, chia ra 2 trường hợp hóa đơn mới thì mã >0, còn đơn mới thì ngược lại
        //Mã >0 (Đơn cũ)
        if (ma > 0) {
            //Lấy danh sách sản phẩm chưa có trong đơn hàng
            ArrayList<Sanpham> ds = daoSP.getListNew(ma);
            //Get Model bảng
            modelSP = (DefaultTableModel) tblSP.getModel();
            modelSP.setRowCount(0);
            //Duyệt danh sách mới lấy đổ bảng
            for (Sanpham a : ds) {
                if (a.getSoluong() > 0) {
                    modelSP.addRow(new Object[]{
                        a.getMasp(),
                        a.getTensp(),
                        a.getMancc(),
                        currencyVN.format(a.getDongia()),
                        a.getSoluong(),
                        false
                    });
                }

            }
        } //Đơn mới
        else {
            //Đơn mới chưa có sản phẩm thì lấy toàn bộ sản phẩm
            ArrayList<Sanpham> ds = daoSP.laydanhsach();
            //Get Model bảng
            modelSP = (DefaultTableModel) tblSP.getModel();
            modelSP.setRowCount(0);
            //Duyệt bảng đổ sản phẩm
            for (Sanpham a : ds) {
                if (a.getSoluong() > 0) {
                    modelSP.addRow(new Object[]{
                        a.getMasp(),
                        a.getTensp(),
                        a.getMancc(),
                        currencyVN.format(a.getDongia()),
                        a.getSoluong(),
                        false
                    });
                }

            }
        }

    }

    public ArrayList<Sanpham> search() {
        ArrayList<Sanpham> ketquatimkiem = new ArrayList<>();
        String value = txtsearch.getText().trim().toUpperCase();
        daoSP.reLoad();
        ArrayList<Sanpham> ds = daoSP.getListNew(madh);
        try {
            float giatri = Float.parseFloat(txtsearch.getText());
            if (giatri >= 0) {
                for (int i = 0; i < ds.size(); i++) {
                    if (ds.get(i).getDongia() >= giatri) {
                        ketquatimkiem.add(ds.get(i));
                    }
                }
            }
        } catch (Exception e) {
            for (int i = 0; i < ds.size(); i++) {

                if (ds.get(i).getMasp().toUpperCase().contains(value) | ds.get(i).getTensp().toUpperCase().contains(value) | ds.get(i).getMancc().toUpperCase().contains(value)) {

                    ketquatimkiem.add(ds.get(i));
                }
            }
        }
        return ketquatimkiem;
    }

    //Đổ bảng danh sách Chi tiết hóa đơn, x là mã đơn hàng truyền vào
    public void Fill(int x) {
        daoDH.reLoad();
        daoCT.reLoad();
        //Chia ra 2 trường hợp đơn mới và đơn cũ
        //x>0 Đơn cũ
        if (x > 0) {
            modelCart = (DefaultTableModel) CartTemp.getModel();
            modelCart.setRowCount(0);
            //Set madh toàn cục trong class bằng x truyền vào
            madh = x;
            //Đổ trạng thái
            String trangthai = daoDH.find(x).getTrangthai();
            if (trangthai.equals("Đã thanh toán")) {
                checkbox.setSelected(true);
            } else {
                checkbox.setSelected(false);
            }
            //Lấy danh sách sản phẩm của đơn hàng, Old là ArrayList toàn cục khai báo rỗng
            Old.clear();
            //Gọi hàm lấy data từ SQL vô đã soạn sẵn
            Old = daoCT.laybyHD(x);
            //Gọi Load ở trên load lại mã sản phẩm để loại cái nào đã có rồi ra
            loadSP(madh);
            //Duyệt danh sách Old chứa data đơn hàng đổ bảng
            for (Chitietdonhang ct : Old) {
                modelCart.addRow(new Object[]{
                    ct.getMasp(),
                    daoSP.find(ct.getMasp()).getTensp(),
                    daoNCC.find(daoSP.find(ct.getMasp()).getMancc()).getTenncc(),
                    ct.getDongia(),
                    ct.getSoluong(),
                    currencyVN.format(ct.getDongia() * ct.getSoluong()),
                    (boolean) false
                });
            }
            tongtien.setText(daoDH.getTongtien(madh));
        } //Đơn mới x<0
        else {
            //Gọi Load sản phẩm đã soạn ở trên
            loadSP(x);
            //Set madh toàn cục <0 Để sang nút Add đơn hàng làm việc
            madh = x;
        }

    }
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        modelSP = (DefaultTableModel) tblSP.getModel();
        modelSP.setRowCount(0);
        for (Sanpham a : search()) {
            modelSP.addRow(new Object[]{
                a.getMasp(),
                a.getTensp(),
                a.getMancc(),
                a.getDongia() + "",
                false
            });
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    //Hàm add đơn hàng chi tiết
    private void btnAddCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCartActionPerformed
        // TODO add your handling code here:
        daoCT.reLoad();
        daoSP.reLoad();
        daoDH.reLoad();
        //Tạo danh sách chưa tên các sản phẩm tick
        ArrayList<String> ds = new ArrayList<>();
        //Lấy trạng thái
        String trangthai = "Chưa thanh toán";
        if (checkbox.isSelected()) {
            trangthai = "Đã thanh toán";
        }
        //Chia ra 2 trường hợp đơn mới và đơn cũ
        //Đơn cũ madh>0
        if (madh > 0) {
            //Lấy đơn hàng cũ ra để set trạng thái, xài find
            Donhang newDH = daoDH.find(madh);
            //Set trạng thái
            newDH.setTrangthai(trangthai);
            //Update lại
            daoDH.updateToDB(newDH);
            //Duyệt bảng Sản phẩm lấy ra tên những sản phẩm đã tick
            for (int i = 0; i < tblSP.getRowCount(); i++) {
                boolean chk = (boolean) tblSP.getValueAt(i, 5);
                if (chk) {
                    System.out.println(i);
                    String masp = tblSP.getValueAt(i, 0).toString();
                    //Thêm vô danh sách
                    ds.add(masp);

                }
            }
            //Xét nếu danh sách có tick
            if (ds.size() > 0) {
                daoCT.reLoad();
                for (String masp : ds) {
                    Sanpham a = daoSP.find(masp);
                    int sl = a.getSoluong();
                    //Thêm chi tiết đơn hàng
                    Chitietdonhang newct = new Chitietdonhang(madh, masp, daoSP.find(masp).getDongia(), 1);
                    a.setSoluong(sl - 1);
                    daoSP.updateToDB(a);
                    daoCT.addToDB(newct);
                }
            } else {
                Dialog.ThongBao(this, "Khong co san pham");
            }

        } //Đơn mới
        else {

            System.out.println("xuong tao moi");
            //Thêm đơn hàng trước
            int chk1 = daoDH.addToDB(new Donhang(Tienich.getNgayDK(), trangthai, Tienich.khachhang.getMakh(), Tienich.user.getManv()));
            //Kiểm tra xem tạo đc k
            if (chk1 != 0) {
                //Tạo đc thì lấy mã mới tạo gắn vô thằng madh toàn cục
                madh = daoDH.getLastMaDH();
                System.out.println(madh);
                //Duyệt danh sách sản phẩm lấy tên sản phẩm đã tick
                for (int i = 0; i < tblSP.getRowCount(); i++) {
                    boolean chk = (boolean) tblSP.getValueAt(i, 5);
                    if (chk) {
                        System.out.println(i);
                        String masp = tblSP.getValueAt(i, 0).toString();
                        ds.add(masp);
                    }
                }
                System.out.println(ds.size());
                //Duyệt danh sách mới lấy để add Database
                for (String masp : ds) {
                    Sanpham a = daoSP.find(masp);
                    int sl = a.getSoluong();
                    System.out.println(sl);
                    Chitietdonhang newct = new Chitietdonhang(madh, masp, daoSP.find(masp).getDongia(), 1);
                    a.setSoluong(sl - 1);
                    daoSP.updateToDB(a);
                    daoCT.addToDB(newct);
                    System.out.println("da them" + masp);
                }
            } else {
                Dialog.ThongBao(this, "Tạo đơn thất bại");
            }

        }
        //Hết 2 trường hợp load lại Fill bảng lại
        Fill(madh);
        loadSP(madh);
        System.out.println(madh);

    }//GEN-LAST:event_btnAddCartActionPerformed

    private void CartTempMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartTempMouseClicked
        // TODO add your handling code here:
        String sl = CartTemp.getValueAt(CartTemp.getSelectedRow(), 4).toString();
        soluong.setText(sl);

    }//GEN-LAST:event_CartTempMouseClicked
//Hàm cập nhật
    private void btnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyActionPerformed
        // TODO add your handling code here:
        //Nếu danh sách đơn hàng chi tiết có chi tiết đơn hàng thì mới cập nhật
        if (CartTemp.getRowCount() > 0) {
            daoDH.reLoad();
            //Get trạng thái
            String trangthai = "Chưa thanh toán";
            if (checkbox.isSelected()) {
                trangthai = "Đã thanh toán";
            }
            //Lấy đơn hàng ra để set trạng thái và update
            Donhang newdh = daoDH.find(madh);
            newdh.setTrangthai(trangthai);
            daoDH.updateToDB(newdh);
            //Tạo danh sách rỗng để chứa tên sản phẩm tick xóa
            ArrayList<String> danhsachxoa = new ArrayList<>();
            //Duyệt bảng lấy danh sách tick
            for (int i = 0; i < CartTemp.getRowCount(); i++) {
                boolean chk = (boolean) CartTemp.getValueAt(i, 6);
                if (chk) {
                    System.out.println(i);
                    danhsachxoa.add(daoCT.laybyHD(madh).get(i).getMasp());
                }
            }
            //Duyệt danh sách xóa & xóa trong database
            for (String masp : danhsachxoa) {
                daoCT.reLoad();
                System.out.println(masp);
                Sanpham sp=daoSP.find(masp);
                int sl=sp.getSoluong();
                
                Chitietdonhang newct=daoCT.find(madh, masp);
                int slold=sl+newct.getSoluong();
                sp.setSoluong(slold);
                daoSP.updateToDB(sp);
                daoCT.deleteFromDB(daoCT.find(madh, masp));
            }
            //Xong load lại
            Fill(madh);
            loadSP(madh);
        }


    }//GEN-LAST:event_btnApplyActionPerformed

    private void btnApply1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApply1ActionPerformed
        // TODO add your handling code here:
        try {
            daoSP.reLoad();
            if (CartTemp.getSelectedRow() >= 0) {
                Sanpham a = daoSP.find(CartTemp.getValueAt(CartTemp.getSelectedRow(), 0).toString());
                int slsp = a.getSoluong();
                int sl = Integer.valueOf(soluong.getText());
                Chitietdonhang newct = daoCT.laybyHD(madh).get(CartTemp.getSelectedRow());
                
                int slcu=newct.getSoluong();
                if (sl > slsp + slcu) {
                    Dialog.ThongBao(this, "Số lượng trong kho không đủ");
                    return;
                }
                newct.setSoluong(sl);
                daoCT.updateToDB(newct);
                a.setSoluong(slsp + slcu - sl);
                daoSP.updateToDB(a);
                Fill(madh);
                loadSP(madh);
            } else {
                Dialog.ThongBao(this, "Bạn chưa chọn sản phẩm");
            }

        } catch (Exception e) {
            Dialog.ThongBao(this, "K dung dinh dang so");
        }

    }//GEN-LAST:event_btnApply1ActionPerformed

    private void cbotrangthaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbotrangthaiActionPerformed
        // TODO add your handling code here:

        PrintPDF.trangthai = cbotrangthai.getSelectedItem().toString();


    }//GEN-LAST:event_cbotrangthaiActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            if (daoDH.getTongtienFloat(madh) <= 0) {
                Dialog.ThongBao(this, "Chưa có sản phẩm nào");
            } else {
                new PrintPDF().Print(madh);
                File newfile = new File(PrintPDF.destination);

                Runtime.getRuntime().exec("rundll32 url.dll, FileProtocolHandler " + newfile.getAbsolutePath());
            }

        } catch (Exception e) {
            System.out.println(e);
        }

    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable CartTemp;
    private javax.swing.JButton btnAddCart;
    private javax.swing.JButton btnApply;
    private javax.swing.JButton btnApply1;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cbotrangthai;
    private javax.swing.JCheckBox checkbox;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField soluong;
    private javax.swing.JTable tblSP;
    private javax.swing.JLabel tongtien;
    private javax.swing.JLabel txtTenKH;
    private javax.swing.JTextField txtsearch;
    // End of variables declaration//GEN-END:variables
}
